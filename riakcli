#! /usr/bin/env bash

printUsage() {
	echo  ""
	echo  "Usage:"
	echo  ""
	echo  "  riakcli list buckets [bucket-type]                                   -> Lists all the buckets available in RIAK"
	echo  "  riakcli list keys [bucket-type] [bucket-name]                        -> Lists all keys in a given bucket"
	echo  ""
	echo  "  riakcli get object [bucket-type] [bucket-name] [key]                 -> Gets the object associated with a given key in a specified bucket"	
	echo  "  riakcli put object [bucket-type] [bucket-name] [key] [object-json]   -> Creates/Updates an object for a given key in a specified bucket"
	echo  "  riakcli search by_index [bucket-type] [bucket-name] [index-name] [index-value]"
	echo  "                                                                       -> Searches given value by secondary index in a specified bucket"
	echo  ""
	echo  "  riakcli delete bucket [bucket-type] [bucket-name]                    -> Deletes all objects in a specified bucket"
	echo  "  riakcli delete object [bucket-type] [bucket-name] [key]              -> Deletes an object in a given bucket"
	echo  "  riakcli flush [bucket-type]                                          -> Deletes all the buckets in RIAK"
	echo  ""
	echo  "  riakcli ping                                           -> Connects to RIAK instance for status"
	echo  "  riakcli help                                           -> Displays this usage information"	
}

printInvalidUsage() {
	echo  ""
	echo "********************************************************"
	echo "ERROR: Invalid Usage "		
	echo "********************************************************"

	printUsage
}

### HELPER FUNCTIONS ###
checkForArgs() {
	ARGS_REQUIRED=$1
	MESSAGE=$2
	shift 2
	if [ $# -lt $ARGS_REQUIRED ]; then		
		echo "\n********************************************************"
		echo "ERROR: Insufficient arguments"
		echo "ERROR: Command: ${MESSAGE}"
		echo "********************************************************"

		printUsage
		exit	
	fi
}

crl() {
	curl -sS -w "\n" $*
}

cput() {	
	local URL=$1
	local DATA=$2
	crl -XPUT -H "Content-Type:application/json" ${URL} -d ${DATA}
}

cput2i() {	
	local URL=$1; shift;
	local DATA=$1; shift;
	local SI=""
	if (( $# != 0 && $# % 2 == 0 )); then
		while [[ $1 ]]; do
			SI+="-H x-riak-index-$1_bin:";shift
			SI+="$1";shift
		done
	fi		
	crl -XPUT -H "Content-Type:application/json" ${URL} ${SI} -d ${DATA}
}

cdel() {
	local URL=$1
	crl -XDELETE ${URL}
}

########################
ping() {
	crl ${RIAK_BASE_URL}/ping
}

listBuckets() {
	checkForArgs 1 "riakcli list buckets [bucket-type]" $*
	local TYPE=$1; shift;
	crl -s ${RIAK_BASE_URL}/types/${TYPE}/buckets?buckets=true
}

listKeysInBucket() {
	checkForArgs 2 "riakcli list keys [bucket-type] [bucket-name]" $*
	local TYPE=$1; shift;
	local BUCKET=$1; shift;
	crl ${RIAK_BASE_URL}/types/${TYPE}/buckets/${BUCKET}/keys?keys=true 
}

getObject() {
	checkForArgs 3 "riakcli get object [bucket-type] [bucket-name] [key]" $*

	local TYPE=$1; shift;
	local BUCKET=$1; shift;
	local KEY=$1; shift;

	crl ${RIAK_BASE_URL}/types/${TYPE}/buckets/${BUCKET}/keys/${KEY}
}

putObject() {	
	checkForArgs 4 "riakcli put object [bucket-type] [bucket-name] [key] [object-json] (-ib [index-name] [index-value])*" $*

	local TYPE=$1; shift;
	local BUCKET=$1; shift;
	local KEY=$1; shift;
	local OBJECT=$1; shift;
	OBJECT=$(echo ${OBJECT} | sed "s/ //g")
	
	local INDEX_ARRAY=()
	while [[ $1 ]]
	do
		case "$1" in
			"-ib" )
				shift
				if [[ $1 == "" ]];then printInvalidUsage; exit; fi
				INDEX_ARRAY=("${INDEX_ARRAY[@]}" $1); shift
				if [[ $1 == "" ]];then printInvalidUsage; exit; fi
				INDEX_ARRAY=("${INDEX_ARRAY[@]}" $1); shift
				;;
			* )
				printInvalidUsage		
				;;
		esac
	done
	
	if (( ${#INDEX_ARRAY[@]} == 0 )); then
		cput ${RIAK_BASE_URL}/types/${TYPE}/buckets/${BUCKET}/keys/${KEY} ${OBJECT}
	else
		cput2i ${RIAK_BASE_URL}/types/${TYPE}/buckets/${BUCKET}/keys/${KEY} ${OBJECT} ${INDEX_ARRAY[@]}
	fi
}

searchByIndex() {
	checkForArgs 4 "search by_index [bucket-type] [bucket-name] [index-name] [index-value]" $*	
	local TYPE=$1; shift;
	local BUCKET=$1; shift;
	local INDEX=$1; shift;
	local VALUE=$1; shift;

	crl ${RIAK_BASE_URL}/types/${TYPE}/buckets/${BUCKET}/index/${INDEX}_bin/${VALUE}
}

deleteBucket() {
	checkForArgs 2 "riakcli delete bucket [bucket-type] [bucket-name]" $*
	local TYPE=$1; shift;
	local BUCKET=$1; shift;
	
	for KEY in $(listKeysInBucket ${TYPE} ${BUCKET} | sed -e 's/^.*\[//g' -e 's/"//g' -e 's/\]\}//g' -e 's/,/\'$'\n/g');
    do
        deleteObject ${TYPE} ${BUCKET} ${KEY}
    done;
}

deleteObject() {
	checkForArgs 3 "riakcli delete object [bucket-type] [bucket-name] [key]" $*

	local TYPE=$1; shift;
	local BUCKET=$1; shift;
	local KEY=$1; shift;

	cdel ${RIAK_BASE_URL}/types/${TYPE}/buckets/${BUCKET}/keys/${KEY};
}

flush() {
	checkForArgs 1 "riakcli flush [bucket-type]" $*
	local TYPE=$1; shift;
	
	for BUCKET in  $(listBuckets ${TYPE} | cut -d ':' -f2 | sed -e 's/^.*\[//g' -e 's/"//g' -e 's/\]\}//g' -e 's/,/\'$'\n/g');
	do
		echo "Deleting bucket - types/${TYPE}/buckets/${BUCKET}"
		deleteBucket ${TYPE} ${BUCKET}
	done;
}

valuesFromJson() {
       sed -e 's/^.*\[//g' -e 's/"//g' -e 's/\]\}//g' -e 's/,/\'$'\n/g'
}

### TOP LEVEL COMMANDS BEGIN ###


list() {
	case "$1" in
		"buckets" )
			shift
			listBuckets $*
			;;
		"keys" )
			shift
			listKeysInBucket $* | valuesFromJson
			;;
		* )
			printInvalidUsage			
			;;
	esac	
}

get() {
	case "$1" in
		"object" )
			shift
			getObject $*
			;;
		* )
			printInvalidUsage			
			;;
	esac	
}

search() {
	case "$1" in
		"by_index" )
			shift
			searchByIndex $* | valuesFromJson
			;;
		* ) 
			printInvalidUsage			
			;;
	esac
}

put() {
	case "$1" in
		"object" )
			shift
			putObject $*
			;;
		* )
			printInvalidUsage			
			;;
	esac
}

delete() {
	case "$1" in
		"bucket" )
			shift
			deleteBucket $*
			;;
		"object" )
			shift
			deleteObject $*
			;;
		* )
			printInvalidUsage			
			;;			
	esac
}

### TOP LEVEL COMMANDS END ###

__init__() {

	RIAK_HOST="localhost"
	RIAK_PORT=8098

	if [ -f "$HOME/.riakclirc" ]; then . "$HOME/.riakclirc"; fi

	export RIAK_PORT RIAK_PORT
	RIAK_BASE_URL="http://${RIAK_HOST}:${RIAK_PORT}"
	export RIAK_BASE_URL

	case "$1" in
		"-w" )
			set -x
			shift
			;;
	esac

	case "$1" in
		"help" )
			printUsage
			;;
		"ping" )
			ping
			;;
		"put" )
			shift
			put $*
			;;
		"get" )
			shift
			get $*
			;;
		"search" )
			shift
			search $*
			;;
		"list" )
			shift
			list $*
			;;
		"delete" )
			shift
			delete $*
			;;
		"flush" )
			shift
			flush $*
			;;
		* )
			printUsage
			;;
	esac
}

__init__ $*
